# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_libestats', [dirname(__file__)])
        except ImportError:
            import _libestats
            return _libestats
        if fp is not None:
            try:
                _mod = imp.load_module('_libestats', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _libestats = swig_import_helper()
    del swig_import_helper
else:
    import _libestats
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


NULL = _libestats.NULL
ESTATS_ADDRTYPE_UNKNOWN = _libestats.ESTATS_ADDRTYPE_UNKNOWN
ESTATS_ADDRTYPE_IPV4 = _libestats.ESTATS_ADDRTYPE_IPV4
ESTATS_ADDRTYPE_IPV6 = _libestats.ESTATS_ADDRTYPE_IPV6
ESTATS_ADDRTYPE_DNS = _libestats.ESTATS_ADDRTYPE_DNS
ESTATS_AGENT_TYPE_LOCAL = _libestats.ESTATS_AGENT_TYPE_LOCAL
ESTATS_ERR_SUCCESS = _libestats.ESTATS_ERR_SUCCESS
ESTATS_ERR_FILE = _libestats.ESTATS_ERR_FILE
ESTATS_ERR_AGENT_TYPE = _libestats.ESTATS_ERR_AGENT_TYPE
ESTATS_ERR_NOMEM = _libestats.ESTATS_ERR_NOMEM
ESTATS_ERR_NOCONNECTION = _libestats.ESTATS_ERR_NOCONNECTION
ESTATS_ERR_INVAL = _libestats.ESTATS_ERR_INVAL
ESTATS_ERR_HEADER = _libestats.ESTATS_ERR_HEADER
ESTATS_ERR_NOVAR = _libestats.ESTATS_ERR_NOVAR
ESTATS_ERR_NOGROUP = _libestats.ESTATS_ERR_NOGROUP
ESTATS_ERR_SOCK = _libestats.ESTATS_ERR_SOCK
ESTATS_ERR_KERNVER = _libestats.ESTATS_ERR_KERNVER
ESTATS_ERR_NOIMPL = _libestats.ESTATS_ERR_NOIMPL
ESTATS_ERR_UNKNOWN = _libestats.ESTATS_ERR_UNKNOWN
ESTATS_ERR_LIBC = _libestats.ESTATS_ERR_LIBC
ESTATS_ERR_GROUP = _libestats.ESTATS_ERR_GROUP
ESTATS_ERR_CUSTOM = _libestats.ESTATS_ERR_CUSTOM
ESTATS_ERR_EOF = _libestats.ESTATS_ERR_EOF
ESTATS_ERR_UNKNOWN_TYPE = _libestats.ESTATS_ERR_UNKNOWN_TYPE
ESTATS_ERR_UNHANDLED_VALUE_TYPE = _libestats.ESTATS_ERR_UNHANDLED_VALUE_TYPE
ESTATS_ERR_RANGE = _libestats.ESTATS_ERR_RANGE
ESTATS_ERR_STRING_CONVERSION = _libestats.ESTATS_ERR_STRING_CONVERSION
ESTATS_ERR_ACCESS = _libestats.ESTATS_ERR_ACCESS
ESTATS_ERR_CHKSUM = _libestats.ESTATS_ERR_CHKSUM
ESTATS_TYPE_INTEGER = _libestats.ESTATS_TYPE_INTEGER
ESTATS_TYPE_INTEGER32 = _libestats.ESTATS_TYPE_INTEGER32
ESTATS_TYPE_INET_ADDRESS_IPV4 = _libestats.ESTATS_TYPE_INET_ADDRESS_IPV4
ESTATS_TYPE_IP_ADDRESS = _libestats.ESTATS_TYPE_IP_ADDRESS
ESTATS_TYPE_COUNTER32 = _libestats.ESTATS_TYPE_COUNTER32
ESTATS_TYPE_GAUGE32 = _libestats.ESTATS_TYPE_GAUGE32
ESTATS_TYPE_UNSIGNED32 = _libestats.ESTATS_TYPE_UNSIGNED32
ESTATS_TYPE_TIME_TICKS = _libestats.ESTATS_TYPE_TIME_TICKS
ESTATS_TYPE_COUNTER64 = _libestats.ESTATS_TYPE_COUNTER64
ESTATS_TYPE_INET_PORT_NUMBER = _libestats.ESTATS_TYPE_INET_PORT_NUMBER
ESTATS_TYPE_UNSIGNED16 = _libestats.ESTATS_TYPE_UNSIGNED16
ESTATS_TYPE_INET_ADDRESS = _libestats.ESTATS_TYPE_INET_ADDRESS
ESTATS_TYPE_INET_ADDRESS_IPV6 = _libestats.ESTATS_TYPE_INET_ADDRESS_IPV6
ESTATS_TYPE_OCTET = _libestats.ESTATS_TYPE_OCTET
ESTATS_VALUE_TYPE_UINT16 = _libestats.ESTATS_VALUE_TYPE_UINT16
ESTATS_VALUE_TYPE_INT32 = _libestats.ESTATS_VALUE_TYPE_INT32
ESTATS_VALUE_TYPE_UINT32 = _libestats.ESTATS_VALUE_TYPE_UINT32
ESTATS_VALUE_TYPE_UINT64 = _libestats.ESTATS_VALUE_TYPE_UINT64
ESTATS_VALUE_TYPE_STRING = _libestats.ESTATS_VALUE_TYPE_STRING
ESTATS_VALUE_TYPE_IP4ADDR = _libestats.ESTATS_VALUE_TYPE_IP4ADDR
ESTATS_VALUE_TYPE_IP6ADDR = _libestats.ESTATS_VALUE_TYPE_IP6ADDR
ESTATS_VALUE_TYPE_OCTET = _libestats.ESTATS_VALUE_TYPE_OCTET
class estats_timeval(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, estats_timeval, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, estats_timeval, name)
    __repr__ = _swig_repr
    __swig_setmethods__["sec"] = _libestats.estats_timeval_sec_set
    __swig_getmethods__["sec"] = _libestats.estats_timeval_sec_get
    if _newclass:sec = _swig_property(_libestats.estats_timeval_sec_get, _libestats.estats_timeval_sec_set)
    __swig_setmethods__["usec"] = _libestats.estats_timeval_usec_set
    __swig_getmethods__["usec"] = _libestats.estats_timeval_usec_get
    if _newclass:usec = _swig_property(_libestats.estats_timeval_usec_get, _libestats.estats_timeval_usec_set)
    def __init__(self): 
        this = _libestats.new_estats_timeval()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libestats.delete_estats_timeval
    __del__ = lambda self : None;
estats_timeval_swigregister = _libestats.estats_timeval_swigregister
estats_timeval_swigregister(estats_timeval)

class estats_connection_spec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, estats_connection_spec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, estats_connection_spec, name)
    __repr__ = _swig_repr
    __swig_setmethods__["dst_addr"] = _libestats.estats_connection_spec_dst_addr_set
    __swig_getmethods__["dst_addr"] = _libestats.estats_connection_spec_dst_addr_get
    if _newclass:dst_addr = _swig_property(_libestats.estats_connection_spec_dst_addr_get, _libestats.estats_connection_spec_dst_addr_set)
    __swig_setmethods__["src_addr"] = _libestats.estats_connection_spec_src_addr_set
    __swig_getmethods__["src_addr"] = _libestats.estats_connection_spec_src_addr_get
    if _newclass:src_addr = _swig_property(_libestats.estats_connection_spec_src_addr_get, _libestats.estats_connection_spec_src_addr_set)
    __swig_setmethods__["dst_port"] = _libestats.estats_connection_spec_dst_port_set
    __swig_getmethods__["dst_port"] = _libestats.estats_connection_spec_dst_port_get
    if _newclass:dst_port = _swig_property(_libestats.estats_connection_spec_dst_port_get, _libestats.estats_connection_spec_dst_port_set)
    __swig_setmethods__["src_port"] = _libestats.estats_connection_spec_src_port_set
    __swig_getmethods__["src_port"] = _libestats.estats_connection_spec_src_port_get
    if _newclass:src_port = _swig_property(_libestats.estats_connection_spec_src_port_get, _libestats.estats_connection_spec_src_port_set)
    def __init__(self): 
        this = _libestats.new_estats_connection_spec()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libestats.delete_estats_connection_spec
    __del__ = lambda self : None;
estats_connection_spec_swigregister = _libestats.estats_connection_spec_swigregister
estats_connection_spec_swigregister(estats_connection_spec)

class spec_ascii(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, spec_ascii, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, spec_ascii, name)
    __repr__ = _swig_repr
    __swig_setmethods__["dst_addr"] = _libestats.spec_ascii_dst_addr_set
    __swig_getmethods__["dst_addr"] = _libestats.spec_ascii_dst_addr_get
    if _newclass:dst_addr = _swig_property(_libestats.spec_ascii_dst_addr_get, _libestats.spec_ascii_dst_addr_set)
    __swig_setmethods__["src_addr"] = _libestats.spec_ascii_src_addr_set
    __swig_getmethods__["src_addr"] = _libestats.spec_ascii_src_addr_get
    if _newclass:src_addr = _swig_property(_libestats.spec_ascii_src_addr_get, _libestats.spec_ascii_src_addr_set)
    __swig_setmethods__["dst_port"] = _libestats.spec_ascii_dst_port_set
    __swig_getmethods__["dst_port"] = _libestats.spec_ascii_dst_port_get
    if _newclass:dst_port = _swig_property(_libestats.spec_ascii_dst_port_get, _libestats.spec_ascii_dst_port_set)
    __swig_setmethods__["src_port"] = _libestats.spec_ascii_src_port_set
    __swig_getmethods__["src_port"] = _libestats.spec_ascii_src_port_get
    if _newclass:src_port = _swig_property(_libestats.spec_ascii_src_port_get, _libestats.spec_ascii_src_port_set)
    def __init__(self): 
        this = _libestats.new_spec_ascii()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libestats.delete_spec_ascii
    __del__ = lambda self : None;
spec_ascii_swigregister = _libestats.spec_ascii_swigregister
spec_ascii_swigregister(spec_ascii)

ESTATS_VERSTR_LEN_MAX = _libestats.ESTATS_VERSTR_LEN_MAX
ESTATS_GROUPNAME_LEN_MAX = _libestats.ESTATS_GROUPNAME_LEN_MAX
ESTATS_VARNAME_LEN_MAX = _libestats.ESTATS_VARNAME_LEN_MAX
ESTATS_VAR_FL_DEP = _libestats.ESTATS_VAR_FL_DEP
ESTATS_VAR_FL_WARNED = _libestats.ESTATS_VAR_FL_WARNED
class estats_list(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, estats_list, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, estats_list, name)
    __repr__ = _swig_repr
    __swig_setmethods__["next"] = _libestats.estats_list_next_set
    __swig_getmethods__["next"] = _libestats.estats_list_next_get
    if _newclass:next = _swig_property(_libestats.estats_list_next_get, _libestats.estats_list_next_set)
    __swig_setmethods__["prev"] = _libestats.estats_list_prev_set
    __swig_getmethods__["prev"] = _libestats.estats_list_prev_get
    if _newclass:prev = _swig_property(_libestats.estats_list_prev_get, _libestats.estats_list_prev_set)
    def __init__(self): 
        this = _libestats.new_estats_list()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libestats.delete_estats_list
    __del__ = lambda self : None;
estats_list_swigregister = _libestats.estats_list_swigregister
estats_list_swigregister(estats_list)

class s_connection(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, s_connection, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, s_connection, name)
    __repr__ = _swig_repr
    __swig_setmethods__["spec"] = _libestats.s_connection_spec_set
    __swig_getmethods__["spec"] = _libestats.s_connection_spec_get
    if _newclass:spec = _swig_property(_libestats.s_connection_spec_get, _libestats.s_connection_spec_set)
    __swig_setmethods__["list"] = _libestats.s_connection_list_set
    __swig_getmethods__["list"] = _libestats.s_connection_list_get
    if _newclass:list = _swig_property(_libestats.s_connection_list_get, _libestats.s_connection_list_set)
    __swig_setmethods__["agent"] = _libestats.s_connection_agent_set
    __swig_getmethods__["agent"] = _libestats.s_connection_agent_get
    if _newclass:agent = _swig_property(_libestats.s_connection_agent_get, _libestats.s_connection_agent_set)
    __swig_setmethods__["cid"] = _libestats.s_connection_cid_set
    __swig_getmethods__["cid"] = _libestats.s_connection_cid_get
    if _newclass:cid = _swig_property(_libestats.s_connection_cid_get, _libestats.s_connection_cid_set)
    __swig_setmethods__["addrtype"] = _libestats.s_connection_addrtype_set
    __swig_getmethods__["addrtype"] = _libestats.s_connection_addrtype_get
    if _newclass:addrtype = _swig_property(_libestats.s_connection_addrtype_get, _libestats.s_connection_addrtype_set)
    def s_next(self): return _libestats.s_connection_s_next(self)
    def s_access(self): return _libestats.s_connection_s_access(self)
    def s_read_value(self, *args): return _libestats.s_connection_s_read_value(self, *args)
    def __init__(self): 
        this = _libestats.new_s_connection()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libestats.delete_s_connection
    __del__ = lambda self : None;
s_connection_swigregister = _libestats.s_connection_swigregister
s_connection_swigregister(s_connection)

class estats_var(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, estats_var, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, estats_var, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _libestats.estats_var_name_set
    __swig_getmethods__["name"] = _libestats.estats_var_name_get
    if _newclass:name = _swig_property(_libestats.estats_var_name_get, _libestats.estats_var_name_set)
    __swig_setmethods__["list"] = _libestats.estats_var_list_set
    __swig_getmethods__["list"] = _libestats.estats_var_list_get
    if _newclass:list = _swig_property(_libestats.estats_var_list_get, _libestats.estats_var_list_set)
    __swig_setmethods__["group"] = _libestats.estats_var_group_set
    __swig_getmethods__["group"] = _libestats.estats_var_group_get
    if _newclass:group = _swig_property(_libestats.estats_var_group_get, _libestats.estats_var_group_set)
    __swig_setmethods__["len"] = _libestats.estats_var_len_set
    __swig_getmethods__["len"] = _libestats.estats_var_len_get
    if _newclass:len = _swig_property(_libestats.estats_var_len_get, _libestats.estats_var_len_set)
    __swig_setmethods__["type"] = _libestats.estats_var_type_set
    __swig_getmethods__["type"] = _libestats.estats_var_type_get
    if _newclass:type = _swig_property(_libestats.estats_var_type_get, _libestats.estats_var_type_set)
    __swig_setmethods__["offset"] = _libestats.estats_var_offset_set
    __swig_getmethods__["offset"] = _libestats.estats_var_offset_get
    if _newclass:offset = _swig_property(_libestats.estats_var_offset_get, _libestats.estats_var_offset_set)
    __swig_setmethods__["flags"] = _libestats.estats_var_flags_set
    __swig_getmethods__["flags"] = _libestats.estats_var_flags_get
    if _newclass:flags = _swig_property(_libestats.estats_var_flags_get, _libestats.estats_var_flags_set)
    def s_next(self): return _libestats.estats_var_s_next(self)
    def s_get_name(self): return _libestats.estats_var_s_get_name(self)
    def s_get_type(self): return _libestats.estats_var_s_get_type(self)
    def __init__(self): 
        this = _libestats.new_estats_var()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libestats.delete_estats_var
    __del__ = lambda self : None;
estats_var_swigregister = _libestats.estats_var_swigregister
estats_var_swigregister(estats_var)

class estats_group(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, estats_group, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, estats_group, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _libestats.estats_group_name_set
    __swig_getmethods__["name"] = _libestats.estats_group_name_get
    if _newclass:name = _swig_property(_libestats.estats_group_name_get, _libestats.estats_group_name_set)
    __swig_setmethods__["list"] = _libestats.estats_group_list_set
    __swig_getmethods__["list"] = _libestats.estats_group_list_get
    if _newclass:list = _swig_property(_libestats.estats_group_list_get, _libestats.estats_group_list_set)
    __swig_setmethods__["agent"] = _libestats.estats_group_agent_set
    __swig_getmethods__["agent"] = _libestats.estats_group_agent_get
    if _newclass:agent = _swig_property(_libestats.estats_group_agent_get, _libestats.estats_group_agent_set)
    __swig_setmethods__["size"] = _libestats.estats_group_size_set
    __swig_getmethods__["size"] = _libestats.estats_group_size_get
    if _newclass:size = _swig_property(_libestats.estats_group_size_get, _libestats.estats_group_size_set)
    __swig_setmethods__["nvars"] = _libestats.estats_group_nvars_set
    __swig_getmethods__["nvars"] = _libestats.estats_group_nvars_get
    if _newclass:nvars = _swig_property(_libestats.estats_group_nvars_get, _libestats.estats_group_nvars_set)
    __swig_setmethods__["var_list_head"] = _libestats.estats_group_var_list_head_set
    __swig_getmethods__["var_list_head"] = _libestats.estats_group_var_list_head_get
    if _newclass:var_list_head = _swig_property(_libestats.estats_group_var_list_head_get, _libestats.estats_group_var_list_head_set)
    def __init__(self): 
        this = _libestats.new_estats_group()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libestats.delete_estats_group
    __del__ = lambda self : None;
estats_group_swigregister = _libestats.estats_group_swigregister
estats_group_swigregister(estats_group)

class s_agent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, s_agent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, s_agent, name)
    __repr__ = _swig_repr
    __swig_setmethods__["version"] = _libestats.s_agent_version_set
    __swig_getmethods__["version"] = _libestats.s_agent_version_get
    if _newclass:version = _swig_property(_libestats.s_agent_version_get, _libestats.s_agent_version_set)
    __swig_setmethods__["spec"] = _libestats.s_agent_spec_set
    __swig_getmethods__["spec"] = _libestats.s_agent_spec_get
    if _newclass:spec = _swig_property(_libestats.s_agent_spec_get, _libestats.s_agent_spec_set)
    __swig_setmethods__["read"] = _libestats.s_agent_read_set
    __swig_getmethods__["read"] = _libestats.s_agent_read_get
    if _newclass:read = _swig_property(_libestats.s_agent_read_get, _libestats.s_agent_read_set)
    __swig_setmethods__["connection_list_head"] = _libestats.s_agent_connection_list_head_set
    __swig_getmethods__["connection_list_head"] = _libestats.s_agent_connection_list_head_get
    if _newclass:connection_list_head = _swig_property(_libestats.s_agent_connection_list_head_get, _libestats.s_agent_connection_list_head_set)
    __swig_setmethods__["type"] = _libestats.s_agent_type_set
    __swig_getmethods__["type"] = _libestats.s_agent_type_get
    if _newclass:type = _swig_property(_libestats.s_agent_type_get, _libestats.s_agent_type_set)
    def __init__(self): 
        this = _libestats.new_s_agent()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libestats.delete_s_agent
    __del__ = lambda self : None;
    def s_get_var_head(self): return _libestats.s_agent_s_get_var_head(self)
    def s_get_connection_head(self): return _libestats.s_agent_s_get_connection_head(self)
    def test_info(self): return _libestats.s_agent_test_info(self)
s_agent_swigregister = _libestats.s_agent_swigregister
s_agent_swigregister(s_agent)

class s_snapshot(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, s_snapshot, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, s_snapshot, name)
    __repr__ = _swig_repr
    __swig_setmethods__["spec"] = _libestats.s_snapshot_spec_set
    __swig_getmethods__["spec"] = _libestats.s_snapshot_spec_get
    if _newclass:spec = _swig_property(_libestats.s_snapshot_spec_get, _libestats.s_snapshot_spec_set)
    __swig_setmethods__["tv"] = _libestats.s_snapshot_tv_set
    __swig_getmethods__["tv"] = _libestats.s_snapshot_tv_get
    if _newclass:tv = _swig_property(_libestats.s_snapshot_tv_get, _libestats.s_snapshot_tv_set)
    __swig_setmethods__["group"] = _libestats.s_snapshot_group_set
    __swig_getmethods__["group"] = _libestats.s_snapshot_group_get
    if _newclass:group = _swig_property(_libestats.s_snapshot_group_get, _libestats.s_snapshot_group_set)
    __swig_setmethods__["cid"] = _libestats.s_snapshot_cid_set
    __swig_getmethods__["cid"] = _libestats.s_snapshot_cid_get
    if _newclass:cid = _swig_property(_libestats.s_snapshot_cid_get, _libestats.s_snapshot_cid_set)
    __swig_setmethods__["data"] = _libestats.s_snapshot_data_set
    __swig_getmethods__["data"] = _libestats.s_snapshot_data_get
    if _newclass:data = _swig_property(_libestats.s_snapshot_data_get, _libestats.s_snapshot_data_set)
    def __init__(self, *args): 
        this = _libestats.new_s_snapshot(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libestats.delete_s_snapshot
    __del__ = lambda self : None;
    def s_take_snapshot(self): return _libestats.s_snapshot_s_take_snapshot(self)
    def s_read_value(self, *args): return _libestats.s_snapshot_s_read_value(self, *args)
s_snapshot_swigregister = _libestats.s_snapshot_swigregister
s_snapshot_swigregister(s_snapshot)

class estats_error(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, estats_error, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, estats_error, name)
    __repr__ = _swig_repr
    __swig_setmethods__["num"] = _libestats.estats_error_num_set
    __swig_getmethods__["num"] = _libestats.estats_error_num_get
    if _newclass:num = _swig_property(_libestats.estats_error_num_get, _libestats.estats_error_num_set)
    __swig_setmethods__["msg"] = _libestats.estats_error_msg_set
    __swig_getmethods__["msg"] = _libestats.estats_error_msg_get
    if _newclass:msg = _swig_property(_libestats.estats_error_msg_get, _libestats.estats_error_msg_set)
    __swig_setmethods__["xtra"] = _libestats.estats_error_xtra_set
    __swig_getmethods__["xtra"] = _libestats.estats_error_xtra_get
    if _newclass:xtra = _swig_property(_libestats.estats_error_xtra_get, _libestats.estats_error_xtra_set)
    __swig_setmethods__["file"] = _libestats.estats_error_file_set
    __swig_getmethods__["file"] = _libestats.estats_error_file_get
    if _newclass:file = _swig_property(_libestats.estats_error_file_get, _libestats.estats_error_file_set)
    __swig_setmethods__["line"] = _libestats.estats_error_line_set
    __swig_getmethods__["line"] = _libestats.estats_error_line_get
    if _newclass:line = _swig_property(_libestats.estats_error_line_get, _libestats.estats_error_line_set)
    __swig_setmethods__["function"] = _libestats.estats_error_function_set
    __swig_getmethods__["function"] = _libestats.estats_error_function_get
    if _newclass:function = _swig_property(_libestats.estats_error_function_get, _libestats.estats_error_function_set)
    def __init__(self): 
        this = _libestats.new_estats_error()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libestats.delete_estats_error
    __del__ = lambda self : None;
estats_error_swigregister = _libestats.estats_error_swigregister
estats_error_swigregister(estats_error)

class s_value(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, s_value, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, s_value, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _libestats.s_value_type_set
    __swig_getmethods__["type"] = _libestats.s_value_type_get
    if _newclass:type = _swig_property(_libestats.s_value_type_get, _libestats.s_value_type_set)
    __swig_getmethods__["u"] = _libestats.s_value_u_get
    if _newclass:u = _swig_property(_libestats.s_value_u_get)
    __swig_destroy__ = _libestats.delete_s_value
    __del__ = lambda self : None;
    def s_get_type(self): return _libestats.s_value_s_get_type(self)
    def s_as_int(self): return _libestats.s_value_s_as_int(self)
    def s_as_long(self): return _libestats.s_value_s_as_long(self)
    def s_as_string(self): return _libestats.s_value_s_as_string(self)
    def __init__(self): 
        this = _libestats.new_s_value()
        try: self.this.append(this)
        except: self.this = this
s_value_swigregister = _libestats.s_value_swigregister
s_value_swigregister(s_value)

class estats_value_u(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, estats_value_u, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, estats_value_u, name)
    __repr__ = _swig_repr
    __swig_setmethods__["u8_val"] = _libestats.estats_value_u_u8_val_set
    __swig_getmethods__["u8_val"] = _libestats.estats_value_u_u8_val_get
    if _newclass:u8_val = _swig_property(_libestats.estats_value_u_u8_val_get, _libestats.estats_value_u_u8_val_set)
    __swig_setmethods__["u16_val"] = _libestats.estats_value_u_u16_val_set
    __swig_getmethods__["u16_val"] = _libestats.estats_value_u_u16_val_get
    if _newclass:u16_val = _swig_property(_libestats.estats_value_u_u16_val_get, _libestats.estats_value_u_u16_val_set)
    __swig_setmethods__["s32_val"] = _libestats.estats_value_u_s32_val_set
    __swig_getmethods__["s32_val"] = _libestats.estats_value_u_s32_val_get
    if _newclass:s32_val = _swig_property(_libestats.estats_value_u_s32_val_get, _libestats.estats_value_u_s32_val_set)
    __swig_setmethods__["u32_val"] = _libestats.estats_value_u_u32_val_set
    __swig_getmethods__["u32_val"] = _libestats.estats_value_u_u32_val_get
    if _newclass:u32_val = _swig_property(_libestats.estats_value_u_u32_val_get, _libestats.estats_value_u_u32_val_set)
    __swig_setmethods__["u64_val"] = _libestats.estats_value_u_u64_val_set
    __swig_getmethods__["u64_val"] = _libestats.estats_value_u_u64_val_get
    if _newclass:u64_val = _swig_property(_libestats.estats_value_u_u64_val_get, _libestats.estats_value_u_u64_val_set)
    __swig_setmethods__["str_val"] = _libestats.estats_value_u_str_val_set
    __swig_getmethods__["str_val"] = _libestats.estats_value_u_str_val_get
    if _newclass:str_val = _swig_property(_libestats.estats_value_u_str_val_get, _libestats.estats_value_u_str_val_set)
    __swig_setmethods__["ip4addr_val"] = _libestats.estats_value_u_ip4addr_val_set
    __swig_getmethods__["ip4addr_val"] = _libestats.estats_value_u_ip4addr_val_get
    if _newclass:ip4addr_val = _swig_property(_libestats.estats_value_u_ip4addr_val_get, _libestats.estats_value_u_ip4addr_val_set)
    __swig_setmethods__["ip6addr_val"] = _libestats.estats_value_u_ip6addr_val_set
    __swig_getmethods__["ip6addr_val"] = _libestats.estats_value_u_ip6addr_val_get
    if _newclass:ip6addr_val = _swig_property(_libestats.estats_value_u_ip6addr_val_get, _libestats.estats_value_u_ip6addr_val_set)
    def __init__(self): 
        this = _libestats.new_estats_value_u()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libestats.delete_estats_value_u
    __del__ = lambda self : None;
estats_value_u_swigregister = _libestats.estats_value_u_swigregister
estats_value_u_swigregister(estats_value_u)

class estats_log_entry(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, estats_log_entry, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, estats_log_entry, name)
    __repr__ = _swig_repr
    __swig_setmethods__["list"] = _libestats.estats_log_entry_list_set
    __swig_getmethods__["list"] = _libestats.estats_log_entry_list_get
    if _newclass:list = _swig_property(_libestats.estats_log_entry_list_get, _libestats.estats_log_entry_list_set)
    __swig_setmethods__["tv"] = _libestats.estats_log_entry_tv_set
    __swig_getmethods__["tv"] = _libestats.estats_log_entry_tv_get
    if _newclass:tv = _swig_property(_libestats.estats_log_entry_tv_get, _libestats.estats_log_entry_tv_set)
    __swig_setmethods__["data"] = _libestats.estats_log_entry_data_set
    __swig_getmethods__["data"] = _libestats.estats_log_entry_data_get
    if _newclass:data = _swig_property(_libestats.estats_log_entry_data_get, _libestats.estats_log_entry_data_set)
    __swig_setmethods__["log"] = _libestats.estats_log_entry_log_set
    __swig_getmethods__["log"] = _libestats.estats_log_entry_log_get
    if _newclass:log = _swig_property(_libestats.estats_log_entry_log_get, _libestats.estats_log_entry_log_set)
    def __init__(self): 
        this = _libestats.new_estats_log_entry()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libestats.delete_estats_log_entry
    __del__ = lambda self : None;
estats_log_entry_swigregister = _libestats.estats_log_entry_swigregister
estats_log_entry_swigregister(estats_log_entry)

R_MODE = _libestats.R_MODE
W_MODE = _libestats.W_MODE
class estats_log(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, estats_log, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, estats_log, name)
    __repr__ = _swig_repr
    __swig_setmethods__["var_list_head"] = _libestats.estats_log_var_list_head_set
    __swig_getmethods__["var_list_head"] = _libestats.estats_log_var_list_head_get
    if _newclass:var_list_head = _swig_property(_libestats.estats_log_var_list_head_get, _libestats.estats_log_var_list_head_set)
    __swig_setmethods__["entry_list_head"] = _libestats.estats_log_entry_list_head_set
    __swig_getmethods__["entry_list_head"] = _libestats.estats_log_entry_list_head_get
    if _newclass:entry_list_head = _swig_property(_libestats.estats_log_entry_list_head_get, _libestats.estats_log_entry_list_head_set)
    __swig_setmethods__["fp"] = _libestats.estats_log_fp_set
    __swig_getmethods__["fp"] = _libestats.estats_log_fp_get
    if _newclass:fp = _swig_property(_libestats.estats_log_fp_get, _libestats.estats_log_fp_set)
    __swig_setmethods__["swap"] = _libestats.estats_log_swap_set
    __swig_getmethods__["swap"] = _libestats.estats_log_swap_get
    if _newclass:swap = _swig_property(_libestats.estats_log_swap_get, _libestats.estats_log_swap_set)
    __swig_setmethods__["bufsize"] = _libestats.estats_log_bufsize_set
    __swig_getmethods__["bufsize"] = _libestats.estats_log_bufsize_get
    if _newclass:bufsize = _swig_property(_libestats.estats_log_bufsize_get, _libestats.estats_log_bufsize_set)
    __swig_setmethods__["nvars"] = _libestats.estats_log_nvars_set
    __swig_getmethods__["nvars"] = _libestats.estats_log_nvars_get
    if _newclass:nvars = _swig_property(_libestats.estats_log_nvars_get, _libestats.estats_log_nvars_set)
    __swig_setmethods__["mode"] = _libestats.estats_log_mode_set
    __swig_getmethods__["mode"] = _libestats.estats_log_mode_get
    if _newclass:mode = _swig_property(_libestats.estats_log_mode_get, _libestats.estats_log_mode_set)
    def __init__(self): 
        this = _libestats.new_estats_log()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libestats.delete_estats_log
    __del__ = lambda self : None;
estats_log_swigregister = _libestats.estats_log_swigregister
estats_log_swigregister(estats_log)


def estats_agent_attach(*args):
  return _libestats.estats_agent_attach(*args)
estats_agent_attach = _libestats.estats_agent_attach

def estats_agent_detach(*args):
  return _libestats.estats_agent_detach(*args)
estats_agent_detach = _libestats.estats_agent_detach

def estats_agent_find_connection_from_cid(*args):
  return _libestats.estats_agent_find_connection_from_cid(*args)
estats_agent_find_connection_from_cid = _libestats.estats_agent_find_connection_from_cid

def estats_agent_find_connection_from_socket(*args):
  return _libestats.estats_agent_find_connection_from_socket(*args)
estats_agent_find_connection_from_socket = _libestats.estats_agent_find_connection_from_socket

def estats_agent_find_connection_from_spec(*args):
  return _libestats.estats_agent_find_connection_from_spec(*args)
estats_agent_find_connection_from_spec = _libestats.estats_agent_find_connection_from_spec

def estats_agent_get_connection_head(*args):
  return _libestats.estats_agent_get_connection_head(*args)
estats_agent_get_connection_head = _libestats.estats_agent_get_connection_head

def estats_agent_get_var_head(*args):
  return _libestats.estats_agent_get_var_head(*args)
estats_agent_get_var_head = _libestats.estats_agent_get_var_head

def estats_agent_find_var_from_name(*args):
  return _libestats.estats_agent_find_var_from_name(*args)
estats_agent_find_var_from_name = _libestats.estats_agent_find_var_from_name

def estats_connection_next(*args):
  return _libestats.estats_connection_next(*args)
estats_connection_next = _libestats.estats_connection_next

def estats_connection_return_next(*args):
  return _libestats.estats_connection_return_next(*args)
estats_connection_return_next = _libestats.estats_connection_return_next

def estats_connection_get_addrtype(*args):
  return _libestats.estats_connection_get_addrtype(*args)
estats_connection_get_addrtype = _libestats.estats_connection_get_addrtype

def estats_connection_get_agent(*args):
  return _libestats.estats_connection_get_agent(*args)
estats_connection_get_agent = _libestats.estats_connection_get_agent

def estats_connection_get_cid(*args):
  return _libestats.estats_connection_get_cid(*args)
estats_connection_get_cid = _libestats.estats_connection_get_cid

def estats_connection_get_connection_spec(*args):
  return _libestats.estats_connection_get_connection_spec(*args)
estats_connection_get_connection_spec = _libestats.estats_connection_get_connection_spec

def estats_connection_read_access(*args):
  return _libestats.estats_connection_read_access(*args)
estats_connection_read_access = _libestats.estats_connection_read_access

def estats_connection_read_value(*args):
  return _libestats.estats_connection_read_value(*args)
estats_connection_read_value = _libestats.estats_connection_read_value

def estats_connection_write_value(*args):
  return _libestats.estats_connection_write_value(*args)
estats_connection_write_value = _libestats.estats_connection_write_value

def estats_connection_spec_as_strings(*args):
  return _libestats.estats_connection_spec_as_strings(*args)
estats_connection_spec_as_strings = _libestats.estats_connection_spec_as_strings

def estats_connection_spec_compare(*args):
  return _libestats.estats_connection_spec_compare(*args)
estats_connection_spec_compare = _libestats.estats_connection_spec_compare

def estats_error_new(*args):
  return _libestats.estats_error_new(*args)
estats_error_new = _libestats.estats_error_new

def estats_error_free(*args):
  return _libestats.estats_error_free(*args)
estats_error_free = _libestats.estats_error_free

def estats_error_print(*args):
  return _libestats.estats_error_print(*args)
estats_error_print = _libestats.estats_error_print

def estats_error_get_number(*args):
  return _libestats.estats_error_get_number(*args)
estats_error_get_number = _libestats.estats_error_get_number

def estats_error_get_message(*args):
  return _libestats.estats_error_get_message(*args)
estats_error_get_message = _libestats.estats_error_get_message

def estats_error_get_extra(*args):
  return _libestats.estats_error_get_extra(*args)
estats_error_get_extra = _libestats.estats_error_get_extra

def estats_error_get_file(*args):
  return _libestats.estats_error_get_file(*args)
estats_error_get_file = _libestats.estats_error_get_file

def estats_error_get_line(*args):
  return _libestats.estats_error_get_line(*args)
estats_error_get_line = _libestats.estats_error_get_line

def estats_error_get_function(*args):
  return _libestats.estats_error_get_function(*args)
estats_error_get_function = _libestats.estats_error_get_function

def estats_snapshot_alloc(*args):
  return _libestats.estats_snapshot_alloc(*args)
estats_snapshot_alloc = _libestats.estats_snapshot_alloc

def estats_snapshot_free(*args):
  return _libestats.estats_snapshot_free(*args)
estats_snapshot_free = _libestats.estats_snapshot_free

def estats_take_snapshot(*args):
  return _libestats.estats_take_snapshot(*args)
estats_take_snapshot = _libestats.estats_take_snapshot

def estats_snapshot_read_value(*args):
  return _libestats.estats_snapshot_read_value(*args)
estats_snapshot_read_value = _libestats.estats_snapshot_read_value

def estats_snapshot_get_timeval(*args):
  return _libestats.estats_snapshot_get_timeval(*args)
estats_snapshot_get_timeval = _libestats.estats_snapshot_get_timeval

def estats_snapshot_delta(*args):
  return _libestats.estats_snapshot_delta(*args)
estats_snapshot_delta = _libestats.estats_snapshot_delta

def estats_value_new(*args):
  return _libestats.estats_value_new(*args)
estats_value_new = _libestats.estats_value_new

def estats_value_free(*args):
  return _libestats.estats_value_free(*args)
estats_value_free = _libestats.estats_value_free

def estats_value_get_type(*args):
  return _libestats.estats_value_get_type(*args)
estats_value_get_type = _libestats.estats_value_get_type

def estats_value_change_type(*args):
  return _libestats.estats_value_change_type(*args)
estats_value_change_type = _libestats.estats_value_change_type

def estats_value_as_uint16(*args):
  return _libestats.estats_value_as_uint16(*args)
estats_value_as_uint16 = _libestats.estats_value_as_uint16

def estats_value_as_int32(*args):
  return _libestats.estats_value_as_int32(*args)
estats_value_as_int32 = _libestats.estats_value_as_int32

def estats_value_as_uint32(*args):
  return _libestats.estats_value_as_uint32(*args)
estats_value_as_uint32 = _libestats.estats_value_as_uint32

def estats_value_as_uint64(*args):
  return _libestats.estats_value_as_uint64(*args)
estats_value_as_uint64 = _libestats.estats_value_as_uint64

def estats_value_as_string(*args):
  return _libestats.estats_value_as_string(*args)
estats_value_as_string = _libestats.estats_value_as_string

def estats_value_as_ip4addr(*args):
  return _libestats.estats_value_as_ip4addr(*args)
estats_value_as_ip4addr = _libestats.estats_value_as_ip4addr

def estats_value_as_ip6addr(*args):
  return _libestats.estats_value_as_ip6addr(*args)
estats_value_as_ip6addr = _libestats.estats_value_as_ip6addr

def estats_value_as_octet(*args):
  return _libestats.estats_value_as_octet(*args)
estats_value_as_octet = _libestats.estats_value_as_octet

def estats_value_compare(*args):
  return _libestats.estats_value_compare(*args)
estats_value_compare = _libestats.estats_value_compare

def estats_value_difference(*args):
  return _libestats.estats_value_difference(*args)
estats_value_difference = _libestats.estats_value_difference

def estats_var_next(*args):
  return _libestats.estats_var_next(*args)
estats_var_next = _libestats.estats_var_next

def estats_var_return_next(*args):
  return _libestats.estats_var_return_next(*args)
estats_var_return_next = _libestats.estats_var_return_next

def estats_var_get_name(*args):
  return _libestats.estats_var_get_name(*args)
estats_var_get_name = _libestats.estats_var_get_name

def estats_var_get_type(*args):
  return _libestats.estats_var_get_type(*args)
estats_var_get_type = _libestats.estats_var_get_type

def estats_var_get_size(*args):
  return _libestats.estats_var_get_size(*args)
estats_var_get_size = _libestats.estats_var_get_size
# This file is compatible with both classic and new-style classes.


